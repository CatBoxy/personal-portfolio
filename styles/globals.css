@tailwind base;
@tailwind components;
@tailwind utilities;

html,
body {
  padding: 0;
  margin: 0;
  font-family: 'IBM Plex Sans', -apple-system, BlinkMacSystemFont, Segoe UI,
    Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue,
    sans-serif;
}

a {
  color: inherit;
  text-decoration: none;
}

:root {
  --backdrop: hsl(0 0% 60% / 0.12);
  --radius: 14;
  --border: 3;
  --backup-border: var(--backdrop);
  --size: 200;
}

*,
*:after,
*:before {
  box-sizing: border-box;
}

/* https://seek-oss.github.io/capsize/ */
.capsize::before {
  content: '';
  margin-bottom: -0.098em;
  display: table;
}

.capsize::after {
  content: '';
  margin-top: -0.219em;
  display: table;
}

/* .prose > :first-child {
  /* Override removing top margin, causing layout shift */
/* margin-top: 1.25em !important;
  margin-bottom: 1.25em !important; */
/* }  */

.prose h2 {
  font-size: 1.5rem;
  font-weight: bold;
  margin-bottom: 1rem;
}

.prose p {
  margin-bottom: 1rem;
  text-align: justify;
  text-justify: inter-word;
}

/**
 * MIT License
 * Copyright (c) 2021 Ayush Saini
 * Holi Theme for prism.js
 * @author Ayush Saini <@AyushCodes on Twitter>
 */

code[class*='language-'],
pre[class*='language-'] {
  color: #d6e7ff;
  background: #030314;
  text-shadow: none;
  font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
  font-size: 1em;
  line-height: 1.5;
  letter-spacing: 0.2px;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  text-align: left;

  -moz-tab-size: 4;
  -o-tab-size: 4;
  tab-size: 4;

  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}

pre[class*='language-']::-moz-selection,
pre[class*='language-'] ::-moz-selection,
code[class*='language-']::-moz-selection,
code[class*='language-'] ::-moz-selection,
pre[class*='language-']::selection,
pre[class*='language-'] ::selection,
code[class*='language-']::selection,
code[class*='language-'] ::selection {
  color: inherit;
  background: #1d3b54;
  text-shadow: none;
}

pre[class*='language-'] {
  border: 1px solid #2a4555;
  border-radius: 5px;
  padding: 1.5em 1em;
  margin: 1em 0;
  overflow: auto;
}

:not(pre) > code[class*='language-'] {
  color: #f0f6f6;
  background: #2a4555;
  padding: 0.2em 0.3em;
  border-radius: 0.2em;
  box-decoration-break: clone;
}

.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: #446e69;
}

.token.punctuation {
  color: #d6b007;
}

.token.property,
.token.tag,
.token.boolean,
.token.number,
.token.constant,
.token.symbol,
.token.deleted {
  color: #d6e7ff;
}

.token.selector,
.token.attr-name,
.token.builtin,
.token.inserted {
  color: #e60067;
}

.token.string,
.token.char {
  color: #49c6ec;
}

.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string {
  color: #ec8e01;
  background: transparent;
}

.token.atrule,
.token.attr-value,
.token.keyword {
  color: #0fe468;
}

.token.function,
.token.class-name {
  color: #78f3e9;
}

.token.regex,
.token.important,
.token.variable {
  color: #d6e7ff;
}

.wrapper {
  position: relative;
  width: 100%;
}

.wrapper > div {
  display: flex;
  flex-direction: column;
  gap: 24px;
}

.article {
  /* aspect-ratio: 3 / 1; */
  border-radius: calc(var(--radius) * 1px);
  width: 100%;
  box-shadow: 0 1rem 2rem -1rem black;
  padding: 1rem;
}

.cardContainer {
  display: flex;
  gap: 2rem;
  flex-wrap: wrap;
  align-items: center;
  justify-content: center;
  max-width: calc(100vw - 2rem);
  position: relative;
}

[data-glow] {
  --border-size: calc(var(--border, 2) * 1px);
  --spotlight-size: calc(var(--size, 150) * 1px);
  --hue: calc(var(--base) + (var(--xp, 0) * var(--spread, 0)));
  background-image: radial-gradient(
    var(--spotlight-size) var(--spotlight-size) at calc(var(--x, 0) * 1px)
      calc(var(--y, 0) * 1px),
    hsl(
      var(--hue, 210) calc(var(--saturation, 100) * 1%)
        calc(var(--lightness, 70) * 1%) / var(--bg-spot-opacity, 0.1)
    ),
    transparent
  );
  background-color: var(--backdrop, transparent);
  background-size: calc(100% + (2 * var(--border-size)))
    calc(100% + (2 * var(--border-size)));
  background-position: 50% 50%;
  background-attachment: fixed;
  border: var(--border-size) solid var(--backup-border);
  position: relative;
  touch-action: none;
}

[data-glow]::before,
[data-glow]::after {
  pointer-events: none;
  content: '';
  position: absolute;
  inset: calc(var(--border-size) * -1);
  border: var(--border-size) solid transparent;
  border-radius: calc(var(--radius) * 1px);
  background-attachment: fixed;
  background-size: calc(100% + (2 * var(--border-size)))
    calc(100% + (2 * var(--border-size)));
  background-repeat: no-repeat;
  background-position: 50% 50%;
  mask: linear-gradient(transparent, transparent), linear-gradient(white, white);
  mask-clip: padding-box, border-box;
  mask-composite: intersect;
}

/* This is the emphasis light */
[data-glow]::before {
  background-image: radial-gradient(
    calc(var(--spotlight-size) * 0.75) calc(var(--spotlight-size) * 0.75) at
      calc(var(--x, 0) * 1px) calc(var(--y, 0) * 1px),
    hsl(
      var(--hue, 210) calc(var(--saturation, 100) * 1%)
        calc(var(--lightness, 50) * 1%) / var(--border-spot-opacity, 1)
    ),
    transparent 100%
  );
  filter: brightness(2);
}

/* This is the spotlight */
[data-glow]::after {
  background-image: radial-gradient(
    calc(var(--spotlight-size) * 0.5) calc(var(--spotlight-size) * 0.5) at
      calc(var(--x, 0) * 1px) calc(var(--y, 0) * 1px),
    hsl(0 100% 100% / var(--border-light-opacity, 1)),
    transparent 100%
  );
}
[data-glow] [data-glow] {
  position: absolute;
  inset: 0;
  will-change: filter;
  opacity: var(--outer, 1);
}
[data-glow] > [data-glow] {
  border-radius: calc(var(--radius) * 1px);
  border-width: calc(var(--border-size) * 20);
  filter: blur(calc(var(--border-size) * 10));
  background: none;
  pointer-events: none;
}
[data-glow] > [data-glow]::before {
  inset: -10px;
  border-width: 10px;
}
[data-glow] [data-glow] {
  border: none;
}
[data-glow] :is(a, button) {
  border-radius: calc(var(--radius) * 1px);
  border: var(--border-size) solid transparent;
}
[data-glow] :is(a, button) [data-glow] {
  background: none;
}
[data-glow] :is(a, button) [data-glow]::before {
  inset: calc(var(--border-size) * -1);
  border-width: calc(var(--border-size) * 1);
}

.workIcon > svg {
  height: 24px;
  width: 24px;
  opacity: 0.7;
}
